from collections import defaultdict
import math

def calculate_conditional_probabilities_unicode(text):
    # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã –ø–∞—Ä —Å–∏–º–≤–æ–ª–æ–≤
    count_pairs = defaultdict(lambda: defaultdict(int))
    count_single = defaultdict(int)
    
    for i in range(len(text) - 1):
        aj = text[i]
        ak = text[i + 1]
        count_pairs[aj][ak] += 1
        count_single[aj] += 1
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ä–µ
    count_single[text[-1]] += 1

    # –£—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ P(ak|aj)
    conditional_probabilities = defaultdict(dict)
    for aj in count_pairs:
        for ak in count_pairs[aj]:
            conditional_probabilities[aj][ak] = count_pairs[aj][ak] / count_single[aj]
    
    return conditional_probabilities, count_single

def calculate_total_information_unicode(text):
    # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã
    conditional_probabilities, count_single = calculate_conditional_probabilities_unicode(text)

    # –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    total_symbols = len(text)
    
    total_info_bits = 0
    for aj in conditional_probabilities:
        for ak in conditional_probabilities[aj]:
            p_ak_aj = conditional_probabilities[aj][ak]
            if p_ak_aj > 0:
                total_info_bits += count_single[aj] * (-p_ak_aj * math.log2(p_ak_aj))

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    total_info_bits /= total_symbols
    
    return total_info_bits

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Unicode —Ç–µ–∫—Å—Ç–æ–º
text = "–∞–±–≤\n–∞–±–≤\tüòä"
total_info_bits = calculate_total_information_unicode(text)
total_info_bytes = total_info_bits / 8

# –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(f"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {total_info_bits:.2f} –±–∏—Ç")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–π—Ç–∞—Ö: {total_info_bytes:.2f} –±–∞–π—Ç")
