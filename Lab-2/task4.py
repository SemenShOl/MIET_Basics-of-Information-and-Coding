import collections
import math

# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –±–∞–π—Ç–æ–≤
def read_file_as_bytes(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

# –ü–æ–¥—Å—á—ë—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏–π –¥–≤—É—Ö—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ –∏ –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
def count_substrings(data):
    count_pairs = collections.defaultdict(int)
    count_single = collections.defaultdict(int)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ñ–∞–π–ª—É –∏ —Å—á–∏—Ç–∞–µ–º –ø–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(len(data) - 1):
        aj, ak = data[i], data[i + 1]
        count_pairs[(aj, ak)] += 1
        count_single[aj] += 1

    return count_pairs, count_single

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π P(ak|aj)
def compute_conditional_probabilities(count_pairs, count_single):
    conditional_probs = {}

    for (aj, ak), pair_count in count_pairs.items():
        if count_single[aj] > 0:
            conditional_probs[(aj, ak)] = pair_count / count_single[aj]

    return conditional_probs

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ I—Å–º1(Q)
def compute_information_content(data, count_pairs, count_single):
    total_info_bits = 0

    for (aj, ak), pair_count in count_pairs.items():
        if count_single[aj] > 0:
            probability = pair_count / count_single[aj]
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –ø–∞—Ä–µ —Å–∏–º–≤–æ–ª–æ–≤ -log2(P(ak|aj))
            info = -math.log2(probability)
            total_info_bits += pair_count * info

    return total_info_bits + 8

def main(filename):
    # data = read_file_as_bytes(filename)
    data = "–∞–±–≤\n–∞–±–≤\tüòä"
    # –®–∞–≥ 1: –ü–æ–¥—Å—á—ë—Ç –≤—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ–¥—Å—Ç—Ä–æ–∫
    count_pairs, count_single = count_substrings(data)

    # –®–∞–≥ 2: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    conditional_probs = compute_conditional_probabilities(count_pairs, count_single)

    # –®–∞–≥ 3: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ I—Å–º1(Q)
    total_info_bits = compute_information_content(data, count_pairs, count_single)

    # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # print(f"–£—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ P(ak|aj):")
    # for (aj, ak), prob in conditional_probs.items():
    #     print(f"P({chr(ak)}|{chr(aj)}) = {prob:.4f}")

    print(f"\n–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {total_info_bits:.2f} –±–∏—Ç")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–π—Ç–∞—Ö: {total_info_bits / 8:.2f} –±–∞–π—Ç")

if __name__ == "__main__":
    filename = "./sources/task_5/unicode.txt"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
    main(filename)


